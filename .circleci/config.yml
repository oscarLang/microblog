version: 2.1
orbs:
    snyk: snyk/snyk@0.0.8
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: osln17/microblog
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  snyk:
    docker:
        - image: circleci/python:3.5
    working_directory: ~/repo
    steps:
        - checkout
        - run:
            name: install dependencies
            command: |
                python3 -m venv venv
                . venv/bin/activate
                make install
        - run: echo "source ~/repo/venv/bin/activate" >> $BASH_ENV # här gör vi så att så att CircleCi automatisk laddar venv och då kollar Snyk vad vi har installerat i den.
        - snyk/scan
  test:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/repo
    steps:
      # Step 1: obtain repo from GitHub
      - checkout
      # Step 2: create virtual env and install dependencies
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install-test
      # Step 3: run linter and tests
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make validate bandit exec-tests

  build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest -f docker/Dockerfile_prod .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
      - snyk/scan:
          docker-image-name: $IMAGE_NAME
          additional-arguments: "--policy-path=.snyk"
  publish-tag:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG
  deploy-appserver:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/repo
    steps:
      # Step 1: obtain repo from GitHub
      - checkout
      # Step 2: create virtual env and install dependencies
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install-deploy
      - run: echo "source ~/repo/venv/bin/activate" >> $BASH_ENV
      # Step 3: Run ansible playbook
      - run:
          name: run ansible playbook microblog_appserver
          command: |
            cd ansible/
            ansible-playbook gather_vm_instances.yml microblog_appserver.yml


workflows:
  version: 2
  run-test:
    jobs:
      - snyk:
          filters:
            tags:
              ignore: /^v.*/
      - test:
          filters:
            tags:
              ignore: /^v.*/
  build-tags:
    jobs:
      - snyk:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build:
          requires:
              - snyk
              - test
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-tag:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy-appserver:
          requires:
            - publish-tag
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
